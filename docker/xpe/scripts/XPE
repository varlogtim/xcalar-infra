#!/usr/bin/env bash

# if host has no xdpce docker container,
# or xdpce:latest is not image version
# included in the app, opens an installer
# and restarts app upon install completion.
# else opens XD linked to xdpce:latest
#
# bash XPE forceinstall   // forces installer to open

set -e

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin

trap cleanup EXIT
trap 'exit' 1 2 3 4 5 6

# get top level app dir abs path
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR/../.."
APP_DIR=$(pwd)

NWJSBIN="$APP_DIR/Contents/Resources/Bin/nwjs-sdk-v0.29.3-osx-x64/nwjs.app/Contents/MacOS/nwjs"
NODEBIN="$APP_DIR/Contents/Resources/Bin/node-v8.11.1-darwin-x64/bin/node"
APPLOGDIR="$APP_DIR/Contents/Logs"
INSTALLSERVER="$APP_DIR/Contents/Resources/Data/Installer/xpeInstallerServer/xpeServer.js"
INSTALLERROOT="$APP_DIR/Contents/Resources/Data/Installer/gui"
LAUNCHFILEPATH="$APP_DIR/Contents/MacOS/.launch"
XDROOT="$APP_DIR/Contents/Resources/Data/xcalar-gui"

# set timestamp env to be used by various processes that will be called for writing log
ts=$(date +%F_%T)
export TIMESTAMP="$ts"
echo "timestamp: $ts"

# file to save server pid in so can kill it if needed
SERVERPIDFILE=/tmp/XPE-${USER}.pid

# check for presence of previous pid and kill if required
if MYAPP_PID="$(cat $SERVERPIDFILE 2>/dev/null)"; then
    kill -TERM "$MYAPP_PID" || true
    rm -f "$SERVERPIDFILE"
fi

# waits for the express server to come up
function waitForServer() {
    until curl http://127.0.0.1:8388
    do
        echo "server not up yet!"
    done
}

# restart app if install completed;
# (nwjs installer window close will signal main event loop end
# and kill icon from mac dock -
# restarting to bring up xd instead of calling it sequentially
# from same bash script process will get icon to re-appear)
function cleanup {
    if [[ "$SERVER_PID" ]]; then
        kill -TERM $SERVER_PID
        rm $SERVERPIDFILE
    fi
    if [[ -e "$LAUNCHFILEPATH" ]]; then
        rm "$LAUNCHFILEPATH"
        open -a "$APP_DIR" &
    fi
}

userlatest=$(bash "$APP_DIR/Contents/Resources/scripts/getimgid.sh" xdpce)
thisbld=$(cat "$APP_DIR/Contents/Resources/Data/.imgid")
echo "userlatest: $userlatest"
echo "thisbld : $thisbld"
if [ "$userlatest" != $thisbld ] || [ "$1" == forceinstall ]; then
    "$NODEBIN" "$INSTALLSERVER" > "$APPLOGDIR"/"$TIMESTAMP"_serverInstallLog 2>&1 &
    SERVER_PID=$!
    echo "server pid: $SERVER_PID"
    echo "$SERVER_PID" > "$SERVERPIDFILE"
    waitForServer
    "$NWJSBIN" "$INSTALLERROOT"
    exit $?
fi

bash "$APP_DIR/Contents/Resources/scripts/bringupcontainers.sh"
"$NWJSBIN" "$XDROOT"
exit $?
