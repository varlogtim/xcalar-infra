#!/usr/bin/env bash

# if host has no xdpce docker container,
# or xdpce:latest is not image version
# included in the app, opens an installer
# and restarts app upon install completion.
# else opens XD linked to xdpce:latest
#
# cmd param can force particular tool:
#
# bash XPE install    // forces installer to open
# bash XPE uninstall  // forces uninstaller to open
# bash XPE revert     // forces revert tool to open
# bash XPE xd         // forces xd to open

set -e

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin

########## SETUP #############

trap cleanup EXIT
trap 'exit' 1 2 3 4 5 6

# get top level app dir abs path
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
RESOURCE_DIR="$APP_DIR/Contents/Resources"

NWJSBIN="$RESOURCE_DIR/Bin/nwjs-sdk-v0.29.3-osx-x64/nwjs.app/Contents/MacOS/nwjs"
NODEBIN="$RESOURCE_DIR/Bin/node-v8.11.1-darwin-x64/bin/node"
APPLOGDIR="$APP_DIR/Contents/Logs"

INSTALLSERVER="$RESOURCE_DIR/guis/xpeGuis/xpeServer/xpeServer.js"

BASHHELPER="$RESOURCE_DIR/guis/xpeGuis/xpeServer/local_installer_mac.sh"

LAUNCHFILEPATH="$APP_DIR/Contents/MacOS/.launch"
INSTALLEDFILE="$APP_DIR/Contents/MacOS/.installed"
GRAFANAMARK="$APP_DIR/Contents/MacOS/.grafana"
DEVBLDMARK="$APP_DIR/Contents/MacOS/.dev"

XDROOT="$RESOURCE_DIR/guis/xcalar-gui"
INSTALLROOT="$RESOURCE_DIR/guis/xpeGuis/Installer"
UNINSTALLROOT="$RESOURCE_DIR/guis/xpeGuis/Uninstaller"
REVERTROOT="$RESOURCE_DIR/guis/xpeGuis/Reverter"
DOCKERSTARTERROOT="$RESOURCE_DIR/guis/xpeGuis/DockerStarter"

LAUNCHED=false

# set timestamp env to be used by various processes that will be called for writing log
ts=$(date +%FT%T%z)
export TIMESTAMP="$ts"
echo "timestamp: $ts" >&2

# if app should build a Grafana container during install, set INSTALL_GRAFANA var
# for the api server to detect

# customer scenario:
# set INSTALL_GRAFANA if .grafana config file present (gets set at bld time)
if [ -z "$INSTALL_GRAFANA" ] && [ -e "$GRAFANAMARK" ]; then
    export INSTALL_GRAFANA=true
elif [ -n "$INSTALL_GRAFANA" ] && [ "$INSTALL_GRAFANA" != true ]; then
    # debug scenario:
    # env var was pre-set as true/false to overwrite config file behavior
    # only keep 'true' - unset for rest (the js that that relies on this env variable
    # does not care what it's value is, only if it exists;
    # it considers the env var existing as 'true' scenario and it not existing as 'false' scenario)
    unset INSTALL_GRAFANA
fi

# if app is a dev bld (will display GUIs diff for dev vs. non-dev blds), set XPE_IS_DEV env var
# for GUI code to pick up on

# (same logic here for customer vs. dev scenario)
if [ -z "$XPE_IS_DEV" ] && [ -e "$DEVBLDMARK" ]; then
    export XPE_IS_DEV=true
elif [ -n "$XPE_IS_DEV" ] && [ "$XPE_IS_DEV" != true ]; then
    unset XPE_IS_DEV
fi

# file to save server pid in so can kill it if needed
SERVERPIDFILE=/tmp/XPE-${USER}.pid

# check for presence of previous pid and kill if required
if MYAPP_PID="$(cat $SERVERPIDFILE 2>/dev/null)"; then
    kill -TERM "$MYAPP_PID" || true
    rm -f "$SERVERPIDFILE"
fi

# waits for the XPE express server to come up
waitForServer() {
    local timeout=10
    local pauseTime=1
    until curl http://127.0.0.1:8388 >/dev/null 2>&1 || [ "$timeout" -eq "0" ]; do
        echo "server not up yet!" >&2
        sleep "$pauseTime"
        timeout=$(($timeout - $pauseTime))
    done

    if ! curl http://127.0.0.1:8388 >/dev/null 2>&1; then
        echo "Timed out waiting for server to come up!" >&2
        exit 1
    fi
}

# nwjs window closing signals main event loop end;
# this kills app icon from mac dock (even if bash script still running)
# but window might need to shut because a sep action should begin
# (EX: install complete user selected to launch XD, user selected uninstall
# from the nwjs menu that displays in XD)
# in these cases, before curr nwjs window closes, a file created with
# requested next action (install, revert, uninstall, launch)
# restarting app and starting that new nwjs process instead of calling
# sequentially from this same bash script process will get icon to re-appear
cleanup() {
    if [[ "$SERVER_PID" ]]; then
        kill -TERM $SERVER_PID
        rm $SERVERPIDFILE
    fi

    if [[ -e "$LAUNCHFILEPATH" ]]; then
        open -a "$APP_DIR" &
    fi
}

# start XPE express server

"$NODEBIN" "$INSTALLSERVER" > "$APPLOGDIR"/"$TIMESTAMP"_serverInstallLog 2>&1 &
SERVER_PID=$!
echo "server pid: $SERVER_PID" >&2
echo "$SERVER_PID" > "$SERVERPIDFILE" >&2
waitForServer

########## CHECK FOR ENTRYPOINT DEPENDENCIES ######

if ! docker version >/dev/null 2>&1; then
    "$NWJSBIN" "$DOCKERSTARTERROOT"
    exit $?
fi

########## LAUNCH APP GUI  ##########

# app action:
# open installer/uninstaller/revert tool/XD based on order of precedence:
#    1. cmdline param (install/uninstall/revert/xd)
#    2. launchFile content (insatll/uninstall/revert/xd)
#    3. in absence of either:
#        (a) if no install mark set in app (blank file that gets set
#             after install) --> install
#        (b) else --> xd

launchInstaller() {
    "$NWJSBIN" "$INSTALLROOT"
}
launchUninstaller() {
    "$NWJSBIN" "$UNINSTALLROOT"
}
launchReverter() {
    "$NWJSBIN" "$REVERTROOT"
}
launchXD() {
    bash "$BASHHELPER" bring_up_containers
    "$NWJSBIN" "$XDROOT"
}

# launches a requested GUI (install/uninstall/revert/xd)
launchGUI() {
    LAUNCHED=true
    case "$1" in
        install)
            launchInstaller
            ;;
        uninstall)
            launchUninstaller
            ;;
        revert)
            launchReverter
            ;;
        xd)
            launchXD
            ;;
        *)
            echo "can't launch based on argument: ($1)" >&2
            LAUNCHED=false
            ;;
    esac
}

if [ "$1" ]; then # cmd param passed to bash script
    launchGUI "$1"
elif [ -e "$LAUNCHFILEPATH" ]; then
    appaction=$(cat "$LAUNCHFILEPATH")
    rm "$LAUNCHFILEPATH"
    launchGUI "$appaction"
fi

# need this as sep. if, in case 'restart' was set in the launch file
# (when you want to restart not to launch a diff GUI, but
# just to restart and run like regular app run)
if [ "$LAUNCHED" = false ]; then
    if [ ! -f "$INSTALLEDFILE" ]; then
        launchInstaller
    else
        launchXD
    fi
fi
exit $?
