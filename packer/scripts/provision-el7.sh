#!/bin/bash
# DO NOT EDIT! THIS FILE IS AUTOGENERATED BY bin/docker2bash.sh!
# Make your changes to $XLRDIR/Dockerfile and run build config to
# generate this file and submit it with your Dockerfile changes

DOCKERPWD=$PWD
DOCKERUSER="`id -un`"
SRCDIR=$PWD
if [ -z "$CONTAINER_USER" ]; then echo >&2 "WARNING: \$CONTAINER_USER not specified in the environment!"; fi
if [ -z "$CONTAINER_UID" ]; then echo >&2 "WARNING: \$CONTAINER_UID not specified in the environment!"; fi
if [ -z "$APT_PROXY" ]; then echo >&2 "WARNING: \$APT_PROXY not specified in the environment!"; fi
rm -f /etc/profile.d/buildenv.sh
set -ex
# FROM centos:7

echo export UPDATED_AT=20161006 | tee -a /etc/profile.d/buildenv.sh && source /etc/profile.d/buildenv.sh

cd $DOCKERPWD && yum localinstall -y http://repo.xcalar.net/xcalar-epel-release.el7.rpm && yum -y update && yum -y install initscripts sudo curl gzip || exit $?
cd $DOCKERPWD && groupadd --system --non-unique -g 999 docker || exit $?
cd $DOCKERPWD && groupadd --system sudo && mkdir -m 0755 -p /etc/sudoers.d && echo '%sudo ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/99-sudo && chmod 0440 /etc/sudoers.d/99-sudo || exit $?
cd $DOCKERPWD && sed -i -E -e 's/Defaults\s+requiretty/Defaults\t!requiretty/g' /etc/sudoers || exit $?

# ARG CONTAINER_USER
# ARG CONTAINER_UID
# ARG APT_PROXY

cd $DOCKERPWD && groupadd --non-unique -g $CONTAINER_UID $CONTAINER_USER && useradd -m -s /bin/bash -g $CONTAINER_USER -G sudo,docker,disk -u $CONTAINER_UID $CONTAINER_USER || exit $?

# AMB: We need this for systemd commands (systemctl restart foo) to work
echo export container=docker | tee -a /etc/profile.d/buildenv.sh && source /etc/profile.d/buildenv.sh
#Entrypoint CMD
#
#!/bin/bash
# DO NOT EDIT! THIS FILE IS AUTOGENERATED BY bin/docker2bash.sh!
# Make your changes to $XLRDIR/Dockerfile and run build config to
# generate this file and submit it with your Dockerfile changes

DOCKERPWD=$PWD
DOCKERUSER="`id -un`"
SRCDIR=$PWD
if [ -z "$CONTAINER_USER" ]; then echo >&2 "WARNING: \$CONTAINER_USER not specified in the environment!"; fi
if [ -z "$CONTAINER_UID" ]; then echo >&2 "WARNING: \$CONTAINER_UID not specified in the environment!"; fi
if [ -z "$APT_PROXY" ]; then echo >&2 "WARNING: \$APT_PROXY not specified in the environment!"; fi
rm -f /etc/profile.d/buildenv.sh
set -ex
# The purpose of this script is essentially to cache the environment needed
# to build the Xcalar RPM. Building this Dockerfile will produce such an
# environment while executing it will (after updating the build environment)
# produce a Xcalar RPM based on the HEAD of your git repo and whatever
# dependency RPMs presently reside on /netstore.

# FROM el7-base

echo export UPDATED_AT=20160811 | tee -a /etc/profile.d/buildenv.sh && source /etc/profile.d/buildenv.sh

# Install dependencies needed to build Xcalar installer. These are a superset
# of the dependencies needed to run the Xcalar installer.
cd $DOCKERPWD && yum localinstall -y http://repo.xcalar.net/xcalar-release-1.0-2.x86_64.rpm && rpmkeys --import /etc/pki/rpm-gpg/RPM-GPG-KEY-Xcalar && yum -y update || exit $?
cd $DOCKERPWD && yum clean all || exit $?
cd $DOCKERPWD && yum -y install libgsasl-devel protobuf-devel-3.0.2 protobuf-compiler-3.0.2 protobuf10 libuuid-devel libxml2-devel krb5-devel python-devel mysql-devel libbsd-devel readline-devel gcc gcc-c++ wget rpm-build git clang make automake libtool jansson-devel libaio-devel libevent-devel glib2-devel libedit-devel libicu-devel bzip2-devel ruby-devel ruby rubygems libarchive-devel libcap-devel libcap jemalloc-devel ccache cryptopp-devel cryptopp || exit $?
cd $DOCKERPWD && gem install --no-rdoc --no-ri fpm || exit $?
cd $DOCKERPWD && rm -fr /var/cache/yum/* && yum clean all || exit $?
cd $DOCKERPWD && yum install -y --enablerepo=xcalar-deps boost-devel-1.55.0 thrift-devel libbsd-devel wamerican || exit $?

# Delete the .so and .la files to prevent the build from linking these dynamically


# Fix the edit line issue

cd $DOCKERPWD && ln -s /usr/include/editline/readline.h /usr/include/editline.h || exit $?
cd $DOCKERPWD && yum clean all && yum makecache && yum install -y libxslt-devel python-lxml python-pip snappy snappy-devel || exit $?
#
#

# ARG CONTAINER_USER
# ARG CONTAINER_UID
# ARG APT_PROXY

cd $DOCKERPWD && mkdir --parent $HOME/rpmbuild/SOURCES $HOME/rpmbuild/BUILD || exit $?

# When container is run, execute the below script, passing additional docker
# command line args through.
#Entrypoint CMD
#
