{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "licenseKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Enter license if provided. Leave blank for 7-day trial"
      }
    },
    "scaleNumber": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of XCE nodes to provision. (Max: 16)"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Administrator's username for the Xcalar cluster"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator's password for the Xcalar cluster"
      }
    }
  },
  "variables": {
    "sq": "'",
    "clusterName": "xdp-standard-",
    "vmSize": "Standard_DS14_v2_Promo",
    "storageAccountType": "Standard_LRS",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'xc')]",
    "availabilitySetName": "[concat(variables('clusterName'), 'AvSet')]",
    "virtualNetworkName": "[concat(variables('clusterName'), 'VNET')]",
    "vnetAddressPrefix": "10.0.0.0/16",
    "publicIPAddressType": "Dynamic",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnet1Name": "[concat(variables('clusterName'),'Subnet-1')]",
    "subnet1Prefix": "10.0.0.0/24",
    "nicName": "[concat(variables('clusterName'),'NIC')]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]",
    "scriptsUri": "https://raw.githubusercontent.com/xcalar-inc/azure-arm-cluster/master",
    "customScriptFilePath": "[concat(variables('scriptsUri'),'/bootstrap.sh')]",
    "customScriptCommandToExecute": "/bin/bash bootstrap.sh ",
    "imagePublisher": "OpenLogic",
    "imageOffer": "CentOS",
    "imageSKU": "7.3",
    "vmExtensionName": "xcalarExtension",
    "imageName": "xcalar-1.2.1-1044",
    "onDiskVhdUri": "https://xcpacker.blob.core.windows.net/system/Microsoft.Compute/Images/xcalar/xcalar-el7-v20170731-osDisk.4c1453b2-52b3-4143-a2e6-455c706ceeb4.vhd"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/images",
      "apiVersion": "2015-05-01-preview",
      "name": "variables('imageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "onDisk": "Linux",
          "onState": "Generalized",
          "blobUri": "[variables('onDiskVhdUri')]",
          "storageAccountType": "[variables('storageAccountType')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('clusterName'), 'publicIP', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "foo",
        "count": "[parameters('scaleNumber')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "foo",
        "count": "[parameters('scaleNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('clusterName'), 'publicIP', copyIndex())]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.0.0.', copyIndex(4))]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('clusterName'), 'publicIP', copyIndex()))]"
              },
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('clusterName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmiterator",
        "count": "[parameters('scaleNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('clusterName'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', 'osdisk', copyIndex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[variables('vmExtensionName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "foo",
        "count": "[parameters('scaleNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('clusterName'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('customScriptFilePath')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('customScriptCommandToExecute'), variables('sq'), variables('clusterName'), variables('sq'), ' ', variables('sq'), copyIndex(), variables('sq'), ' ', variables('sq'), parameters('scaleNumber'), variables('sq'), ' ', variables('sq'), parameters('licenseKey'), variables('sq'), ' >> /var/log/startup.log 2>&1')]"
        }
      }
    }
  ],
  "outputs": {
      "adminUsername": {
          "type": "string",
          "value": "[parameters('adminUsername')]"
      },
      "publicIp": {
          "type": "string",
          "value": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('clusterName'), 'publicIP', '0'))]"
      }
  }
}
