{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of resources"
      }
    },
    "_artifactsLocation": {
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "type": "string",
      "defaultValue": "https://xcrepo.blob.core.windows.net/public/xdp-standard-platform/v8/"
    },
    "_artifactsLocationSasToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      }
    },
    "appName": {
      "type": "string",
      "defaultValue": "xdp-standard",
      "metadata": {
        "description": "Must be valid for a hostname (all lower case, no underscores, periods etc)"
      }
    },
    "installerUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom installer URL (Optional)"
      }
    },
    "installerUrlSasToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom installer URL SAS Token"
      }
    },
    "licenseKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Valid license key or empty to enter key from XD GUI (Optional)"
      }
    },
    "scaleNumber": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 249,
      "metadata": {
        "description": "Number of XCE nodes to provision. (Max: 249)"
      }
    },
    "domainNameLabel": {
      "type": "string",
      "defaultValue": "[concat('xdp-standard-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Domain name label for public ip."
      }
    },
    "appUsername": {
      "type": "string",
      "metadata": {
        "description": "XDP Administrator's username"
      }
    },
    "appPassword": {
      "type": "securestring",
      "metadata": {
        "description": "XDP Administrator's password"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator's email address"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication to use (password of sshkey)"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "VM Administrator's username for the Xcalar cluster, use for SSH access."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "VM Administrator's password or SSH public key for the Xcalar cluster."
      }
    },
    "vmDiskType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "allowedValues": [
        "Premium_LRS",
        "StandardSSD_LRS",
        "Standard_LRS"
      ],
      "metadata": {
        "description": "Type of disk for your VM"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_E8s_v3",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "publicIpAddressNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "New or existing IP address"
      }
    },
    "publicIpAddressRG": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of ipAddrress"
      }
    },
    "publicIpAddressName": {
      "type": "string",
      "defaultValue": "[concat(parameters('appName'),'-pip')]",
      "metadata": {
        "description": "IP Address to use"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether or not a new virtual network should be provisioned."
      }
    },
    "virtualNetworkRG": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "[concat(parameters('appName'),'-vnet')]",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "[concat(parameters('appName'),'-subnet')]",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "New or existing Storage account"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('xdp', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Storage account name"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "storageAccountRG": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Storage account resource group"
      }
    },
    "shareServerNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "New or existing NFS server"
      }
    },
    "shareSize": {
      "type": "string",
      "metadata": {
        "description": "Size of NFS Server VM"
      }
    },
    "shareName": {
      "type": "string",
      "defaultValue": "[concat(parameters('appName'),'-nfs')]",
      "metadata": {
        "description": "NFS storage server"
      }
    },
    "shareFolder": {
      "type": "string",
      "defaultValue": "/data/nfs",
      "metadata": {
        "description": "Share folder on the NFS server"
      }
    },
    "bootDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable storing boot diagnostics"
      }
    }
  },
  "variables": {
    "vmName": "[concat(toLower(parameters('appName')), '-vm')]",
    "nicName": "[concat(parameters('appName'), '-nic')]",
    "networkSecurityGroupName": "[concat(parameters('appName'),'-nsg')]",
    "vnetID": "[resourceId(parameters('virtualNetworkRG'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "shareNic": "[concat(parameters('appName'), '-nfs-nic')]",
    "subnetID": "[resourceId(parameters('virtualNetworkRG'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "publicIPAddress": {
      "id": "[resourceId(parameters('publicIpAddressRG'),'Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
    },
    "sizesWithAcceleratedNetworking": [
      "Standard_F8s_v2",
      "Standard_F16s_v2",
      "Standard_F32s_v2",
      "Standard_F64s_v2",
      "Standard_F72s_v2",
      "Standard_D4_v2",
      "Standard_D5_v2",
      "Standard_D13_v2",
      "Standard_D14_v2",
      "Standard_D15_v2",
      "Standard_D4_v2_Promo",
      "Standard_D5_v2_Promo",
      "Standard_D13_v2_Promo",
      "Standard_D14_v2_Promo",
      "Standard_F8",
      "Standard_F16",
      "Standard_DS4_v2",
      "Standard_DS5_v2",
      "Standard_DS13-2_v2",
      "Standard_DS13-4_v2",
      "Standard_DS13_v2",
      "Standard_DS14-4_v2",
      "Standard_DS14-8_v2",
      "Standard_DS14_v2",
      "Standard_DS15_v2",
      "Standard_DS4_v2_Promo",
      "Standard_DS5_v2_Promo",
      "Standard_DS13_v2_Promo",
      "Standard_DS14_v2_Promo",
      "Standard_F8s",
      "Standard_F16s",
      "Standard_D16_v3",
      "Standard_D32_v3",
      "Standard_D4s_v3",
      "Standard_D4_v3",
      "Standard_D8s_v3",
      "Standard_D8_v3",
      "Standard_D16s_v3",
      "Standard_D32s_v3",
      "Standard_M32-8ms",
      "Standard_M32-16ms",
      "Standard_M32ls",
      "Standard_M32ms",
      "Standard_M32ts",
      "Standard_M64-16ms",
      "Standard_M64-32ms",
      "Standard_M64ls",
      "Standard_M64ms",
      "Standard_M64s",
      "Standard_M128-32ms",
      "Standard_M128-64ms",
      "Standard_M128ms",
      "Standard_M128s",
      "Standard_M64",
      "Standard_M64m",
      "Standard_M128",
      "Standard_M128m",
      "Standard_D64_v3",
      "Standard_D64s_v3",
      "Standard_E4_v3",
      "Standard_E8_v3",
      "Standard_E16_v3",
      "Standard_E32_v3",
      "Standard_E64i_v3",
      "Standard_E64_v3",
      "Standard_E4s_v3",
      "Standard_E8-2s_v3",
      "Standard_E8-4s_v3",
      "Standard_E8s_v3",
      "Standard_E16-4s_v3",
      "Standard_E16-8s_v3",
      "Standard_E16s_v3",
      "Standard_E32-8s_v3",
      "Standard_E32-16s_v3",
      "Standard_E32s_v3",
      "Standard_E64-16s_v3",
      "Standard_E64-32s_v3",
      "Standard_E64is_v3",
      "Standard_E64s_v3"
    ],
    "storageAccountId": "[resourceId(parameters('storageAccountRG'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "customScriptUrl": "[concat(parameters('_artifactsLocation'),'bootstrap.sh', parameters('_artifactsLocationSasToken'))]",
    "customScriptCommandToExecute": "/bin/bash -x bootstrap.sh ",
    "imageReference": {
      "publisher": "OpenLogic",
      "offer": "CentOS",
      "sku": "7.6",
      "version": "latest"
    },
    "customerUploads": "[concat('customer-', toLower(resourceGroup().name))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "shareNetworkSecurityGroupName": "[concat(parameters('shareName'),'-nsg')]",
    "osDiskSize": 127
  },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "condition": "[equals(parameters('shareServerNewOrExisting'),'new')]",
      "name": "[concat(deployment().name,'-nfsTemplate')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[parameters('virtualNetworkName')]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('shareNic'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(parameters('_artifactsLocation'),'nfsTemplate.json', parameters('_artifactsLocationSasToken'))]"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "vmName": {
            "value": "[parameters('shareName')]"
          },
          "vmSize": {
            "value": "[parameters('shareSize')]"
          },
          "vmDiskType": {
            "value": "[parameters('vmDiskType')]"
          },
          "shareFolder": {
            "value": "[parameters('shareFolder')]"
          },
          "imageReference": {
            "value": "[variables('imageReference')]"
          },
          "authenticationType": {
            "value": "[parameters('authenticationType')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPasswordOrKey": {
            "value": "[parameters('adminPasswordOrKey')]"
          },
          "networkInterfaceId": {
              "value": "[resourceId('Microsoft.Network/networkInterfaces', variables('shareNic'))]"
          },
          "nfsPrefix": {
              "value": "[parameters('subnetPrefix')]"
          },
          "tags": {
            "value": {
              "appName": "[parameters('appName')]",
              "adminEmail": "[parameters('adminEmail')]"
            }
          }
        }
      }
    },
    {
        "apiVersion": "2018-02-01",
        "name": "pid-0477ea54-137d-53ee-a010-42e454ef46f9",
        "type": "Microsoft.Resources/deployments",
        "properties": {
            "mode": "Incremental",
            "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "resources": []
            }
        }
    },
    {
      "apiVersion": "2018-07-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "condition": "[equals(parameters('storageAccountNewOrExisting'),'new')]",
      "location": "[parameters('location')]",
      "tags": {
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('publicIpAddressName')]",
      "condition": "[equals(parameters('publicIpAddressNewOrExisting'),'new')]",
      "location": "[parameters('location')]",
      "tags": {
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        }
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('shareNetworkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "tags": {
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "nfs_rule",
            "properties": {
              "description": "Allow NFS access",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "2049",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "deny_all_rule",
            "properties": {
              "description": "Deny all remaining incoming",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "tags": {
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "https_rule",
            "properties": {
              "description": "Allow HTTP, HTTPS access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "80",
                "443",
                "8080",
                "8443",
                "9443"
              ],
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "xcdata_rule",
            "properties": {
              "description": "Xcalar data path",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5000",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "xcmonitor_rule",
            "properties": {
              "description": "Xcalar Monitor communication",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          },
          {
            "name": "xcapi_rule",
            "properties": {
              "description": "Xcalar API communication",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "18552",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Inbound"
            }
          },
          {
            "name": "deny_all_rule",
            "properties": {
              "description": "Deny all remaining incoming",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/virtualNetworks",
      "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "tags": {
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "condition": "[equals(parameters('shareServerNewOrExisting'),'new')]",
      "name": "[variables('shareNic')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('virtualNetworkName')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('shareNetworkSecurityGroupName'))]"
      ],
      "tags": {
        "nodeRole": "nfsserver",
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "properties": {
        "primary": true,
        "enableAcceleratedNetworking": "[contains(variables('sizesWithAcceleratedNetworking'), parameters('shareSize'))]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('shareNetworkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('scaleNumber')]"
      },
      "tags": {
        "nodeId": "[copyIndex()]",
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "dependsOn": [
        "[variables('publicIpAddress').id]",
        "[parameters('virtualNetworkName')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "primary": true,
        "enableAcceleratedNetworking": "[contains(variables('sizesWithAcceleratedNetworking'), parameters('vmSize'))]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[if(equals(copyIndex(), 0), variables('publicIPAddress'), json('null'))]",
              "subnet": {
                "id": "[variables('subnetID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-10-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nodeId",
        "count": "[parameters('scaleNumber')]"
      },
      "tags": {
        "nodeId": "[copyIndex()]",
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('nicName'), copyIndex())]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('vmName'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(variables('vmName'), copyIndex(), '-osdisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "diskSizeGB": "[int(variables('osDiskSize'))]",
            "managedDisk": {
              "storageAccountType": "[parameters('vmDiskType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[parameters('bootDiagnostics')]",
            "storageUri": "[if(parameters('bootDiagnostics'), reference(variables('storageAccountId'), '2017-10-01').primaryEndpoints.blob, json('null'))]"
          }
        }
      }
    },
    {
      "apiVersion": "2018-10-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), copyIndex(), '/bootstrap')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "numExt",
        "count": "[parameters('scaleNumber')]"
      },
      "tags": {
        "nodeId": "[copyIndex()]",
        "appName": "[parameters('appName')]",
        "adminEmail": "[parameters('adminEmail')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('customScriptUrl')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('customScriptCommandToExecute'), ' -t \"', variables('customerUploads'), '\" -s ', if( equals(parameters('shareServerNewOrExisting'),'new'), reference(resourceId('Microsoft.Network/networkInterfaces', variables('shareNic'))).ipConfigurations[0].properties.privateIPAddress, parameters('shareName')),':', parameters('shareFolder'),' -d ', parameters('domainNameLabel'),' -i ', copyIndex(), ' -e \"', variables('vmName'), '\" -c \"', parameters('appName'),'\" -n ', parameters('scaleNumber'), ' -l \"', parameters('licenseKey'), '\" -v \"', parameters('adminEmail'), '\" -w \"', parameters('appUsername'), '\" -x \"', parameters('appPassword'), '\" -y ', parameters('storageAccountName'), ' -z \"', listKeys(variables('storageAccountId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, '\" -u \"', parameters('installerUrl'), parameters('installerUrlSasToken'), '\"')]"
        }
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[reference(variables('publicIpAddress').id,'2017-09-01').dnsSettings.fqdn]",
      "type": "string"
    }
  }
}
