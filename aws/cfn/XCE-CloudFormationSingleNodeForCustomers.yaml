AWSTemplateFormatVersion: '2010-09-09'
Description: XCE AWS CloudFormation Template (Single Instance) -  **WARNING** This
  template creates an Amazon EC2 instance. You will be billed for the AWS resources
  used if you create a stack from this template.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: The SubnetId in your Virtual Private Cloud (VPC)
    ConstraintDescription: A Subnet Id in your Vpc
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstallerUrl:
    Description: XCE Installer
    Type: String
    MinLength: '8'
    MaxLength: '256'
    AllowedPattern: http[s]?://[a-zA-Z][a-zA-Z0-9/\\?%&\\.=-]*
    ConstraintDescription: Must be a valid url.
    Default: http://repo.xcalar.net/builds/prod/xcalar-1.1.2-784-installer
  LicenseKey:
    NoEcho: true
    Description: XCE License
    Type: String
    MinLength: '0'
    MaxLength: '1024'
  AdminUsername:
    Description: XD Administrator name
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminPassword:
    Description: XD Administrator password
    NoEcho: true
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminEmail:
    Description: Email of the administrator
    Type: String
  InstanceType:
    Description: XCE EC2 instance type
    Type: String
    Default: i3.2xlarge
    AllowedValues:
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  CidrLocation:
    Description: ' The IP address range to allow SSH/HTTPS access from'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RootSize:
    Description: Size of root disk
    Type: Number
    Default: '250'
Mappings:
  RegionMap:
    us-east-1:
      "EL7": "ami-ad3ffad7"
    us-west-2:
      "EL7": "ami-d06d92a8"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Xcalar Configuration
        Parameters:
          - LicenseKey
          - InstallerUrl
          - AdminEmail
          - AdminUsername
          - AdminPassword
      - Label:
          default: Instance configuration
        Parameters:
          - InstanceType
          - RootSize
      - Label:
          default: Security configuration
        Parameters:
          - KeyName
          - CidrLocation
      - Label:
          default: Network configuration
        Parameters:
          - VpcId
          - Subnet
    ParameterLabels:
      InstallerUrl:
        default: 'XCE Installer Url:'
      LicenseKey:
        default: 'XCE License Key:'
      InstanceType:
        default: 'Server size:'
      KeyName:
        default: 'Key pair:'
      CidrLocation:
        default: 'CIDR range:'
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "EL7"]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref 'RootSize'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
        - DeviceName: /dev/sdc
          VirtualName: ephemeral1
        - DeviceName: /dev/sdd
          VirtualName: ephemeral2
        - DeviceName: /dev/sde
          VirtualName: ephemeral3
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds:
        - !GetAtt 'InstanceSecurityGroup.GroupId'
      SubnetId: !Ref 'Subnet'
      KeyName: !Ref 'KeyName'
      EbsOptimized: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          set -x
          set +e
          safe_curl() { curl -4 --location --retry 20 --retry-delay 3 --retry-max-time 60 "$@"; }
          XCE_HOME=/var/opt/xcalar
          LICENSE_SERVER="https://x3xjvoyc6f.execute-api.us-west-2.amazonaws.com/production/license/api/v1.0/marketplacedeploy"
          export PATH=$PATH:/opt/aws/bin
          yum install -y epel-release
          yum install -y awscli jq nfs-utils
          RELEASE_RPM=$(rpm -qf /etc/redhat-release)
          RELEASE=$(rpm -q --qf %{VERSION} $RELEASE_RPM)
          ELVERSION="$(echo $RELEASE | sed -e 's/Server//g')"
          rpm -q aws-cfn-bootstrap || yum localinstall -y http://repo.xcalar.net/deps/aws-cfn-bootstrap-1.4-18.el$ELVERSION.noarch.rpm
          cfn-init -v  --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          mkdir -p /etc/xcalar
          echo "${LicenseKey}" > /etc/xcalar/XcalarLic.key
          safe_curl "${InstallerUrl}" -o installer.sh
          /bin/bash -x installer.sh --startonboot --nostart >> /var/log/startup.log 2>&1
          rc=$?
          if [ $rc != 0 ]; then
            cfn-signal --exit-code $rc --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            exit $rc
          fi
          # The default XEN clock source is 1000x slower
          echo tsc > /sys/devices/system/cl*/cl*/current_clocksource
          echo 'echo tsc > /sys/devices/system/cl*/cl*/current_clocksource' >> /etc/rc.local
          (
          /opt/xcalar/scripts/genConfig.sh /etc/xcalar/template.cfg - localhost
          echo "Constants.SendSupportBundle=true"
          ) | tee /etc/xcalar/default.cfg
          # Mount extra instance store
          INSTANCESTORE=/ssd
          SERDES=$INSTANCESTORE/xdbser
          mkdir -p $INSTANCESTORE $SERDES
          chown xcalar:xcalar $INSTANCESTORE $SERDES
          chmod 0777 $INSTANCESTORE
          for RESOURCEDEV in /dev/nvme0n1 /dev/xvdb /dev/xvdc /dev/xvdd /xvde /xvdf; do
            if [[ $RESOURCEDEV =~ nvme ]]; then
              RESOURCEPART="$RESOURCEDEV"p1
            else
              RESOURCEPART="$RESOURCEDEV"1
            fi
            if test -b $RESOURCEDEV && ! test -b $RESOURCEPART; then
              parted $RESOURCEDEV -s 'mklabel gpt mkpart ext2 1 -1'
              for ii in `seq 10`; do
                sleep 2
                mkfs.ext4 -m 0 -L $LABEL -F $RESOURCEPART    && break
              done
              if test -b $RESOURCEPART; then
                UUID="$(blkid -s UUID -o value $RESOURCEPART)"
                echo "UUID=\"$UUID\"     $INSTANCESTORE      ext4   defaults,nofail    0   2  # user-data $RESOURCEPART"  | tee -a /etc/fstab
                mount $INSTANCESTORE
                chown xcalar:xcalar $INSTANCESTORE
                chmod 0777 $INSTANCESTORE
                SWAPFILE="$INSTANCESTORE/swapfile"
                MEMSIZEMB=$(free -m | awk '/Mem:/{print $2}')
                fallocate -l "$((MEMSIZEMB*2))"m $SWAPFILE
                chmod 0600 $SWAPFILE
                mkswap $SWAPFILE
                if ! swapon $SWAPFILE; then
                  rm -f $SWAPFILE
                  time dd if=/dev/zero of=$SWAPFILE bs=1MiB count=$((MEMSIZEMB*2))
                  chmod 0600 $SWAPFILE
                  mkswap $SWAPFILE
                  swapon $SWAPFILE
                fi
                echo "$SWAPFILE   none    swap   defaults,nofail  0   0 # user-data swapfile" | tee -a /etc/fstab
                mkdir -p $SERDES
                chown xcalar:xcalar $SERDES
                echo "Constants.XdbLocalSerDesPath=$SERDES" | tee -a /etc/xcalar/default.cfg
                break
              fi
              RESOURCEPART=
              INSTANCESTORE=
            fi
          done
          mount -a
          mkdir -p /var/opt/xcalar/config
          chown -R xcalar:xcalar /var/opt/xcalar /etc/xcalar
          service xcalar start
          rc=$?
          if [ ! -z "${AdminUsername}" ]; then
              mkdir -p $XCE_HOME/config
              chown -R xcalar:xcalar $XCE_HOME/config
              jsonData="{ \"defaultAdminEnabled\": true, \"username\": \"${AdminUsername}\", \"email\": \"${AdminEmail}\", \"password\": \"${AdminPassword}\" }"
              echo "Creating default admin user ${AdminUsername} (${AdminEmail})"
              # Don't fail the deploy if this curl doesn't work
              safe_curl -H "Content-Type: application/json" -X POST -d "$jsonData" "http://127.0.0.1:12124/login/defaultAdmin/set" || true
          else
              echo "\$AdminUsername is not specified"
          fi
          DEPLOYED_URL="$(safe_curl http://169.254.169.254/2016-09-02/meta-data/public-hostname)"
          if [ ! -z "$DEPLOYED_URL" ]; then
              # Inform license server about URL
              jsonData="{ \"key\": \"${LicenseKey}\", \"url\": \"https://$DEPLOYED_URL\", \"marketplaceName\": \"aws\" }"
              safe_curl -H "Content-Type: application/json" -X POST -d "$jsonData" "$LICENSE_SERVER"
          fi
          cfn-signal --exit-code $rc --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          exit $rc
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTPS access
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'CidrLocation'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'CidrLocation'
Outputs:
  URL:
    Value: !Join ['', ['https://', !GetAtt 'EC2Instance.PublicDnsName']]
    Description: Address of newly created XD instance!
  UserName:
    Value: !Ref 'AdminUsername'
    Description: Default administrator username for XD
  SSH:
    Value: !Join ['', ['ssh -i ~/.ssh/', !Ref 'KeyName','.pem ec2-user@', !GetAtt 'EC2Instance.PublicDnsName']]
    Description: Default administrator username for XD
