AWSTemplateFormatVersion: '2010-09-09'
Description: XCE AWS CloudFormation Template -  **WARNING** This template creates
  a cluster of Amazon EC2 instances. You will be billed for the AWS resources used
  if you create a stack from this template.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Default: vpc-22f26347
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: The SubnetId in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
    Default: subnet-b9ed4ee0
  AvZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: An Availability Zone, such as us-west-2a.
    ConstraintDescription: Must be a valid availabiliy zone
    Default: us-west-2c
  SGList:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: A list of existing security groups.
    Default: default,open-to-users-at-home,open-to-office
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: xcalar-us-west-2
  InstallerUrl:
    Description: XCE Installer
    Type: String
    MinLength: '4'
    MaxLength: '2047'
    AllowedPattern: http[s]?://.*
    ConstraintDescription: Must be a valid url.
    Default: https://s3.us-west-2.amazonaws.com/xcrepo/builds/prod/xcalar-1.4.0-1882-installer?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJU4DLXF3P2I7WGCQ%2F20180606%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180606T201342Z&X-Amz-Expires=604200&X-Amz-SignedHeaders=host&X-Amz-Signature=1c7688b3de9457f92b30eff9dccefa094de3388cdd86b618eebd48e342049558
  BootstrapUrl:
    Description: XCE Bootstrap Script
    Type: String
    MinLength: '8'
    MaxLength: '2047'
    AllowedPattern: http[s]?://.*
    ConstraintDescription: Must be a valid url.
    Default: https://s3-us-west-2.amazonaws.com/xcrepo.xcalar.net/scripts/aws-asg-bootstrap-v6.sh
  LicenseKey:
    Description: XCE License
    Type: String
    MinLength: '0'
    MaxLength: '1024'
    Default: ''
  AdminUsername:
    Description: XD Administrator name used to log into the GUI
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminPassword:
    Description: XD Administrator password
    NoEcho: true
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminEmail:
    Description: Email of the administrator
    Type: String
  InstanceType:
    Description: XCE EC2 instance type
    Type: String
    Default: c5d.2xlarge
    AllowedValues:
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.9xlarge
      - r5d.18xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  ELRelease:
    Description: OS base to use. RHEL7 is RedHat Enterprise Linux 7.4, EL7 is CentOS
      7.4. AmazonLinux is Amazon Linux HVM 2018.03
    Type: String
    Default: AmazonLinux
    AllowedValues:
      - RHEL7
      - EL7
      - AmazonLinux
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  HTTPLocation:
    Description: ' The IP address range to allow HTTP access from'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  InstanceCount:
    Description: Number of EC2 instances to launch
    Type: Number
    Default: '1'
  RootSize:
    Description: Size of root disk
    Type: Number
    Default: '64'
  SwapSize:
    Description: 'Size of swap disk. NOTE: This should be at least 2x the amount of
      memory.'
    Type: Number
    Default: '64'
  PerformanceMode:
    Type: String
    Default: generalPurpose
    AllowedValues:
      - generalPurpose
      - maxIO
Mappings:
  RegionMap:
    us-east-1:
      RHEL7: ami-6871a115
      EL7: ami-0f80d62666b176446
      AmazonLinux: ami-14c5486b
    us-west-2:
      RHEL7: ami-28e07e50
      EL7: ami-02ff71c14348cdca4
      AmazonLinux: ami-e251209a
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Xcalar Configuration
        Parameters:
          - LicenseKey
          - InstallerUrl
          - AdminEmail
          - AdminUsername
          - AdminPassword
          - BootstrapUrl
      - Label:
          default: Instance configuration
        Parameters:
          - InstanceType
          - RootSize
          - SwapSize
          - ELRelease
      - Label:
          default: Security configuration
        Parameters:
          - KeyName
          - SSHLocation
          - HTTPLocation
      - Label:
          default: Network configuration
        Parameters:
          - VpcId
          - Subnet
          - AvZone
          - SGList
    ParameterLabels:
      InstallerUrl:
        default: 'XCE Installer Url:'
      LicenseKey:
        default: 'XCE License Key:'
      InstanceType:
        default: 'Server size:'
      KeyName:
        default: 'Key pair:'
      SSHLocation:
        default: 'SSH CIDR range:'
      HTTPLocation:
        default: 'HTTP CIDR range:'
      AvZone:
        default: 'Availability Zone:'
      BootstrapUrl:
        default: 'Bootstrap Url:'
Resources:
  SGDefault:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - CidrIp: !Ref 'SSHLocation'
          IpProtocol: tcp
          FromPort: 22
          ToPort: '22'
        - CidrIp: !Ref 'HTTPLocation'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref 'HTTPLocation'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SGDefault
    Properties:
      GroupId: !Ref 'SGDefault'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'SGDefault'
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    GroupDescription: Instance to EFS Mount Access
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Security group for mount target
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  EfsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EfsSecurityGroup
    Properties:
      GroupId: !Ref 'EfsSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'EfsSecurityGroup'
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
  IamPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-instance-policy'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
              - ec2:Describe*
              - autoscaling:Describe*
            Resource: '*'
      Roles:
        - !Ref 'IamRole'
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'IamRole'
  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
  SharedFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    PerformanceMode: !Ref 'PerformanceMode'
  MountTarget:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - EfsFileSystem
      - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref 'SharedFileSystem'
      SubnetId: !Ref 'Subnet'
      SecurityGroups:
        - !Ref 'EfsSecurityGroup'
  InstanceGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      PlacementGroup: !Ref 'PlacementGroup'
      AvailabilityZones:
        - !Ref 'AvZone'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: !Ref 'InstanceCount'
      MaxSize: !Ref 'InstanceCount'
      DesiredCapacity: !Ref 'InstanceCount'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: !Ref 'InstanceCount'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - !Ref 'ELRelease'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref 'RootSize'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdm
          Ebs:
            VolumeSize: !Ref 'SwapSize'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
        - DeviceName: /dev/sdc
          VirtualName: ephemeral1
        - DeviceName: /dev/sdd
          VirtualName: ephemeral2
        - DeviceName: /dev/sde
          VirtualName: ephemeral3
      IamInstanceProfile: !Ref 'IamInstanceProfile'
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: !Ref 'SGList'
      KeyName: !Ref 'KeyName'
      EbsOptimized: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          mkdir -m 0700 -p /var/tmp/cloud
          cd /var/tmp/cloud
          cat > /etc/ec2.env <<EOF
          AWS_STACKNAME=${AWS::StackName}
          AWS_REGION=${AWS::Region}
          AWS_STACKID="${AWS::StackId}"
          LicenseKey="${LicenseKey}"
          LICENSE="${LicenseKey}"
          BootstrapUrl="${BootstrapUrl}"
          INSTALLERURL="${InstallerUrl}"
          InstallerUrl="${InstallerUrl}"
          AdminUsername="${AdminUsername}"
          AdminPassword="${AdminPassword}"
          AdminEmail="${AdminEmail}"
          InstanceCount="${InstanceCount}"
          CLUSTERNAME=${ClusterName}
          Resource="InstanceGroup"
          EFSMOUNT=${}
          EOF
          chmod 0600 /etc/ec2.env
          set -a
          . /etc/ec2.env
          set +a

          curl -4 --location --retry 20 --retry-delay 3 --retry-max-time 60 "${BootstrapUrl}" -o bootstrap.sh
          bash -x bootstrap.sh

          if test -e /etc/redhat-release; then
            ELVERSION="$(rpm -qf /etc/redhat-release --qf '%{VERSION}' | cut -c1)"
            case "$(rpm -qf /etc/redhat-release --qf '%{NAME}')" in
              centos-*) OSNAME=el;;
              redhat-*) OSNAME=rhel;;
              oraclelinux*) OSNAME=ol;;
              *) OSNAME=unk;;
            esac
            VERSTRING=$OSNAME$ELVERSION
          elif test -e /etc/system-release; then
            VENDORVER="$(rpm -qf /etc/system-release --qf '%{VENDOR} %{VERSION}')"
            if [[ $VENDORVER =~ Amazon.com\ 201 ]]; then
              OSNAME=amzn
              ELVERSION=1
              VERSTRING=amzn1
            elif [[ $VENDORVER =~ Amazon\ Linux\ 201 ]]; then
              OSNAME=amzn
              ELVERSION=2
              VERSTRING=amzn2
            fi
          fi

          yum install -y epel-release
          yum install -y jq nfs-utils curl

          export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin

          safe_curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "/tmp/awscli-bundle.zip" && (cd /tmp/ && unzip awscli-bundle.zip && ./awscli-bundle/install -i /opt/aws -b /usr/local/bin/aws)
          yum localinstall -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack $AWS_STACKNAME --resource InstanceGroup --region ${AWS::Region}
          try=20
          safe_curl -L https://storage.googleapis.com/repo.xcalar.net/deps/discover-1.gz | gzip -dc > /usr/local/bin/discover
          chmod +x /usr/local/bin/discover
          for try in {0..20}; do
            echo >&2 "Waiting to get IPs .."
            sleep 10
            IPS=($(set -o pipefail; discover addrs provider=aws addr_type=private_v4 "tag_key=aws:cloudformation:stack-id" "tag_value=${AWS::StackId}" | tee IPS.txt )) && break
          done
          mkdir -p /etc/xcalar
          test -n "${LicenseKey}" && echo "${LicenseKey}" | base64 -d | gzip -dc > /etc/xcalar/XcalarLic.key
          if [ $? -ne 0 ]; then
              test -n "${LicenseKey}" && echo "${LicenseKey}" > /etc/xcalar/XcalarLic.key
          fi
          safe_curl -fL "${BootstrapUrl}" -o /usr/local/bin/aws-asg-bootstrap.sh && \
          chmod +x /usr/local/bin/aws-asg-bootstrap.sh && \
          /bin/bash -x /usr/local/bin/aws-asg-bootstrap.sh ${InstanceCount} "${InstallerUrl}" 2>&1 | tee /var/log/aws-asg-bootstrap.log
          rc=${PIPESTATUS[0]}
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $rc --stack ${AWS::StackName} --resource $Resource --region ${AWS::Region}
          if [ -n "${AdminUsername}" ]; then
              XCE_HOME="$(cat /etc/xcalar/default.cfg | grep "^Constants.XcalarRootCompletePath" | cut -d'=' -f2)"
              mkdir -p $XCE_HOME/config
              chown -R xcalar:xcalar $XCE_HOME/config
              jsonData="{ \"defaultAdminEnabled\": true, \"username\": \"${AdminUsername}\", \"email\": \"${AdminEmail}\", \"password\": \"${AdminPassword}\" }"
              echo "Creating default admin user ${AdminUsername} (${AdminEmail})"
              safe_curl -H "Content-Type: application/json" -X POST -d "$jsonData" "http://127.0.0.1:12124/login/defaultAdmin/set"
          else
              echo "\$AdminUsername is not specified"
          fi
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $rc --stack $AWS_STACKNAME --resource $Resource --region $AWS_REGION
          if [ $rc != 0 ]; then
            echo >&2 "ERROR($rc): Deployment had failures"
            exit $rc
          fi
          exit 0
