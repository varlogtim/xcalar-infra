AWSTemplateFormatVersion: '2010-09-09'
Description: Xcalar Data Platform. This template deploys a XDP Cluster on AWS.
Parameters:
  ClusterAccessSGId:
    Description: Security Group ID of wanting access to the Xcalar Cluster (SSH/HTTPS)
    Type: AWS::EC2::SecurityGroup::Id
  InstanceType:
    Type: String
    Description: Xcalar node instance type
    AllowedValues:
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: r5d.2xlarge
  Ec2RetryTagKey:
    Description: The Amazon EC2 instance tag key to filter on when joining to other
      Xcalar nodes.
    Type: String
    Default: aws:cloudformation:stack-name
    ConstraintDescription: Must match EC2 Tag Name requirements.
  Ec2RetryTagValue:
    Description: The Amazon EC2 instance tag value to filter on when joining to other
      Xcalar nodes. Optional, leave blank to use the stack name.
    Type: String
    Default: ''
    ConstraintDescription: Must match EC2 Tag Name requirements.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: id_rsa_aws
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  Subnet:
    Description: ID of the private subnet of your VPC (subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  InstallerUrl:
    MaxLength: '2047'
    ConstraintDescription: Optional. HTTPS/S3 URL to installer or empty if AMI is
      pre-baked
    Default: ''
    Type: String
  BootstrapUrl:
    MaxLength: '2047'
    ConstraintDescription: Location of the bootstrap script. For example, https://s3.amazonaws.com/xcrepoe1/cfn/prod/v2/scripts/user-data.sh
    Type: String
    Default: https://s3.amazonaws.com/xcrepoe1/cfn/prod/xdp-standard/1.4.1-release/scripts/user-data.sh
  CustomScriptUrl:
    MaxLength: '2047'
    ConstraintDescription: Optional. Location of a custom script to run after bootstrap.
    Default: ''
    Type: String
  LicenseKey:
    Description: Optional. Xcalar License. Leave blank to enter via GUI.
    MinLength: '0'
    MaxLength: '1024'
    Default: ''
    NoEcho: true
    Type: String
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  AllowedCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR Block for the VPC that should have access to this cluster. For
      example, your Bastion host IP address or your Office IP
    Type: String
  AssociatePublicIpAddress:
    Description: Associate a Public IP address with resources
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
    Type: String
  AdminUsername:
    Description: XD Administrator name
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminPassword:
    Description: XD Administrator password
    NoEcho: true
    Type: String
    MinLength: '5'
    MaxLength: '128'
  AdminEmail:
    Description: Email of the administrator
    Type: String
  ClusterSize:
    Description: Sets DesiredCapacity, MinSize, and MaxSize
    MinValue: 1
    MaxValue: 16
    Default: 3
    Type: Number
  RootSize:
    Description: Size of Root Disk
    MinValue: 32
    MaxValue: 4095
    Default: 100
    Type: Number
  ExistingShare:
    Description: Existing EFS Share
    Type: String
    Default: NONE
  ExistingMount:
    Description: Existing EFS Mount Point
    Type: String
    Default: NONE
Conditions:
  CreateNewShare: !Equals [!Ref ExistingShare, NONE]
  CreateNewMount: !Equals [!Ref ExistingMount, NONE]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance configuration
        Parameters:
          - InstanceType
          - ClusterSize
          - RootSize
      - Label:
          default: Security configuration
        Parameters:
          - KeyName
      - Label:
          default: Network configuration
        Parameters:
          - VpcId
          - Subnet
          - AssociatePublicIpAddress
          - ClusterAccessSGId
          - AllowedCIDR
          - ExistingShare
          - ExistingMount
      - Label:
          default: Xcalar Configuration
        Parameters:
          - LicenseKey
          - AdminEmail
          - AdminUsername
          - AdminPassword
      - Label:
          default: Advanced Options
        Parameters:
          - InstallerUrl
          - BootstrapUrl
          - CustomScriptUrl
          - Ec2RetryTagKey
          - Ec2RetryTagValue
    ParameterLabels:
      InstallerUrl:
        default: 'XCE Installer Url:'
      LicenseKey:
        default: 'XCE License Key:'
      InstanceType:
        default: 'Server size:'
      KeyName:
        default: 'Key pair:'
  Version: '1.4.1'
  Release: 'RELEASE'
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZN1HVM: amazon/amzn-ami-hvm-2018.03.0.20180811-x86_64-gp2
    us-east-1:
      AMZN1HVM: ami-0297c8f1f8c963b4d
    us-west-2:
      AMZN1HVM: ami-046824ba3c18f2726
Resources:
  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access between nodes, and HTTPS/SSH from the given CIDR.
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref 'ClusterAccessSGId'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref 'ClusterAccessSGId'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref 'ClusterAccessSGId'
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref 'AllowedCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClusterSG'
  ClusterMonitorIngressTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterMonitorIngressUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: udp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressSSL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 18552
      ToPort: 18552
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressProto:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Mount Access Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref 'ClusterSG'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EfsSecurityGroup'
  EfsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EfsSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'EfsSecurityGroup'
  EfsSharedRoot:
    Type: AWS::EFS::FileSystem
    Condition: CreateNewShare
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'
  EfsMountTarget:
    Condition: CreateNewMount
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
      SubnetId: !Ref 'Subnet'
      SecurityGroups:
        - !Ref 'EfsSecurityGroup'
  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
  ClusterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EfsMountTarget
    Properties:
      PlacementGroup: !Ref 'PlacementGroup'
      LaunchConfigurationName: !Ref 'ClusterLC'
      MinSize: !Ref 'ClusterSize'
      MaxSize: !Ref 'ClusterSize'
      DesiredCapacity: !Ref 'ClusterSize'
      VPCZoneIdentifier:
        - !Ref 'Subnet'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-XcalarCluster'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: !Ref 'ClusterSize'
  ClusterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref 'InstanceType'
      AssociatePublicIpAddress: !Ref 'AssociatePublicIpAddress'
      SecurityGroups:
        - !Ref 'ClusterSG'
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMZN1HVM
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref 'RootSize'
            VolumeType: gp2
      IamInstanceProfile: !Ref 'IamClusterProfile'
      UserData: !Base64
        Fn::Sub:
          - |-
            #!/bin/bash
            yum clean all --enablerepo='*'
            RELEASE=$(rpm -qf /etc/system-release --qf "%{RELEASE}")
            VERSION=$(rpm -qf /etc/system-release --qf "%{VERSION}")
            yum install -y curl ca-certificates unzip
            yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ${Resource} --region ${AWS::Region}
            export AWS_DEFAULT_REGION=${AWS::Region}
            if [[ "${SharedRoot}" =~ ^fs-[0-9a-f]{8}$ ]]; then
              NFSMOUNT=$(aws efs describe-mount-targets --file-system-id "${SharedRoot}" --query 'MountTargets[?SubnetId==`${Subnet}`].IpAddress' --output text)
            else
              NFSMOUNT="${SharedRoot}"
            fi
            if [ "${Ec2RetryTagKey}" == "aws:cloudformation:stack-name" ]; then
              retryTagValue=${AWS::StackName}
            else
              retryTagValue=${Ec2RetryTagValue}
            fi
            mkdir -p /var/lib/xcalar-installer
            cd /var/lib/xcalar-installer
            cat <<EOF >> with_cfn.sh
            #!/bin/bash
            script="\$1"
            shift
            "\$script" --admin-username "${AdminUsername}" --admin-password "${AdminPassword}" --admin-email "${AdminEmail}" \
                       --bootstrap-expect "${ClusterSize}" --tag-key "${Ec2RetryTagKey}" --tag-value "$retryTagValue" --stack-name "${AWS::StackName}" \
                       --nfs-mount "$NFSMOUNT" --license "${LicenseKey}" --installer-url "${InstallerUrl}" "\$@"
            EOF
            stage=0
            for remoteUrl in "${BootstrapUrl}" "${CustomScriptUrl}"; do
              part="part-${!stage}.sh"
              if [ -n "$remoteUrl" ] && curl -Lf "$remoteUrl" -o $part; then
                chmod +x $part
                bash -x with_cfn.sh ./$part
                rc=$?
                if [ $rc != 0 ]; then
                  break
                fi
              fi
              stage=$((stage+1))
            done
            /opt/aws/bin/cfn-signal -e $rc  --stack ${AWS::StackName} --resource ${Resource} --region ${AWS::Region}
            exit $rc
          - SharedRoot: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
            Resource: ClusterASG
  IamClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ''
  IamClusterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: xcalar-cluster
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: '*'
          - Effect: Allow
            Action:
              - elasticfilesystem:DescribeMountTargets
            Resource: !Sub
              - 'arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${SharedRoot}'
              - SharedRoot: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
      Roles:
        - !Ref 'IamClusterRole'
  IamClusterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'IamClusterRole'
Outputs:
  MountTargetID:
    Description: Mount target ID
    Value: !If [CreateNewShare, !Ref EfsMountTarget, !Ref ExistingMount]
  FileSystemID:
    Description: File system ID
    Value: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
# vim: ft=yaml
