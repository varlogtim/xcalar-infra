AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  vpccidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.20.0.0/16
  psharedacidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.0.0/22
  psharedbcidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.4.0/22
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
  IGW:
    Type: AWS::EC2::InternetGateway
  S3LogBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-logbucket-${AWS::AccountId}-${AWS::Region}
  S3AppBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-appbucket-${AWS::AccountId}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            Id: rule1
            MaxAge: 3000
      AccessControl: PublicRead
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  BucketPolicyApp:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3AppBucket
      PolicyDocument:
        Statement:
          - Sid: ABC123
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${S3AppBucket}/*
            Principal:
              AWS:
                - '*'
  S3LambdaBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub ${AWS::StackName}-lambdabucket-${AWS::AccountId}-${AWS::Region}
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  BucketPolicyLambda:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3LambdaBucket
      PolicyDocument:
        Statement:
          - Sid: ABC123
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3LambdaBucket}/*'
            Principal:
              AWS:
                - '*'
  GatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  SubnetPublicSharedA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref psharedacidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetPublicSharedB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref psharedbcidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetRouteTableAssociatePublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicSharedA
  SubnetRouteTableAssociatePublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicSharedB
  RouteDefaultPublic:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic
  RouteDefaultPrivateA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref RouteTablePrivateA
  RouteDefaultPrivateB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref RouteTablePrivateB
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  EIPNatGWA:
    DependsOn: GatewayAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPNatGWB:
    DependsOn: GatewayAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGWA.AllocationId
      SubnetId: !Ref SubnetPublicSharedA
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGWB.AllocationId
      SubnetId: !Ref SubnetPublicSharedB
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Statement:
          - Sid: EFG123
            Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref RouteTablePublic
        - !Ref RouteTablePrivateA
        - !Ref RouteTablePrivateB
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
  DynamoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Statement:
          - Sid: EFG123
            Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref RouteTablePublic
        - !Ref RouteTablePrivateA
        - !Ref RouteTablePrivateB
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
  EfsShare:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: EfsShare
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Mount Access Security Group
      VpcId: !Ref VPC
  EfsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EfsSecurityGroup
      IpProtocol: -1
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref EfsSecurityGroup
  EfsMountTargetPublicSubnetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsShare
      SubnetId: !Ref SubnetPublicSharedA
      SecurityGroups:
        - !Ref EfsSecurityGroup
  EfsMountTargetPublicSubnetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsShare
      SubnetId: !Ref SubnetPublicSharedB
      SecurityGroups:
        - !Ref EfsSecurityGroup
Outputs:
  vpciprange:
    Description: IP Range of Shared Infrastructure VPC
    Value: !Ref vpccidr
    Export:
      Name: !Sub ${AWS::StackName}-vpciprange
  vpcreservedrange1:
    Description: IP Range of Shared Public SubnetA
    Value: !Ref psharedacidr
    Export:
      Name: !Sub ${AWS::StackName}-vpcreservedrange1
  vpcreservedrange2:
    Description: IP Range of Shared Public SubnetB
    Value: !Ref psharedbcidr
    Export:
      Name: !Sub ${AWS::StackName}-vpcreservedrange2
  vpcid:
    Description: ID of Shared Infrastructure VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpcid
  natgatewayaid:
    Description: ID of NAT Gateway A
    Value: !Ref NatGatewayA
  natgatewaybid:
    Description: ID of NAT Gateway B
    Value: !Ref NatGatewayB
  publicroutetable:
    Description: ID of Public Route Table
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub ${AWS::StackName}-publicrt
  privateroutetablea:
    Description: ID of Private Route Table - A
    Value: !Ref RouteTablePrivateA
    Export:
      Name: !Sub ${AWS::StackName}-privaterta
  privateroutetableb:
    Description: ID of Private Route Table - B
    Value: !Ref RouteTablePrivateB
    Export:
      Name: !Sub ${AWS::StackName}-privatertb
  logbucket:
    Description: Shared Infrastructure Logs Bucket
    Value: !Ref S3LogBucket
    Export:
      Name: !Sub ${AWS::StackName}-logbucket
  appbucketurl:
    Description: Shared Infrastructure App Bucket
    Value: !GetAtt S3AppBucket.WebsiteURL
    Export:
      Name: !Sub ${AWS::StackName}-appbucketurl
  appbucket:
    Description: App Bucket Name
    Value: !Ref S3AppBucket
    Export:
      Name: !Sub ${AWS::StackName}-appbucket
  lambdabucket:
    Description: Shared Infrastructure Lambda Bucket
    Value: !Ref S3LambdaBucket
    Export:
      Name: !Sub ${AWS::StackName}-lambdabucket
  efs:
    Description: Shared Infrastructure EFS Store
    Value: !Ref EfsShare
    Export:
      Name: !Sub ${AWS::StackName}-efs
  efssg:
    Description: EFS Security Group
    Value: !Ref EfsSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-efssg
