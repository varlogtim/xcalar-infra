AWSTemplateFormatVersion: '2010-09-09'
Description: 'Xcalar Data Platform. This template deploys a XDP Cluter on AWS. Based
  on the Quick Start https://github.com/aws-quickstart/quickstart-hashicorp-consul
  License: Apache 2.0 (Please do not remove) Aug,18,2018 QS(0036)'
Parameters:
  ClusterAccessSGId:
    Description: Security Group ID of wanting access to the Xcalar Cluster (SSH/HTTPS)
    Type: AWS::EC2::SecurityGroup::Id
  ClusterInstanceType:
    Type: String
    Description: Xcalar node instance type
    AllowedValues:
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
    ConstraintDescription: Choose an instance type.
    Default: c5d.4xlarge
  XcalarEc2RetryTagKey:
    Description: The Amazon EC2 instance tag key to filter on when joining to other
      Xcalar nodes.
    Type: String
    Default: aws:cloudformation:stack-name
    ConstraintDescription: Must match EC2 Tag Name requirements.
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: id_rsa_aws
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  PrivateSubnetCluster:
    Description: ID of the private subnet of servers (e.g., subnet-xxxxxxxx)
    Type: AWS::EC2::Subnet::Id
  InstallerUrl:
    MaxLength: '2047'
    ConstraintDescription: Optional. HTTPS/S3 URL to installer or empty if AMI is
      pre-baked.
    Default: ''
    Type: String
  TemplateBaseUrl:
    MaxLength: '2047'
    ConstraintDescription: Base URL holding templates and scripts
    Default: https://s3.amazonaws.com/xcrepoe1/cfn/prod/v1/
    Type: String
  LicenseKey:
    Description: Optional. Xcalar License. Leave blank to enter via GUI.
    MinLength: '0'
    MaxLength: '1024'
    Default: ''
    Type: String
  VPCID:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR Block for the VPC that should have access to this cluster.
    Type: String
  AssociatePublicIpAddress:
    Type: String
    Description: Associate a Public IP address with resources
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  XcalarClusterSize:
    Description: Sets DesiredCapacity, MinSize, and MaxSize
    AllowedValues:
      - '3'
      - '5'
      - '7'
    Default: '3'
    Type: String
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZN1HVM: amazon/amzn-ami-hvm-2018.03.0.20180811-x86_64-gp2
    us-east-1:
      AMZN1HVM: ami-0e1208a711cebcbe9
    us-west-2:
      AMZN1HVM: ami-06c372e7fd1cd1f9c
Resources:
  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables access between nodes, and HTTPS/SSH from BastionHost.
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref 'ClusterAccessSGId'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref 'ClusterAccessSGId'
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref 'VPCCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClusterSG'
  XcalarClusterMonitorIngressTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: '8000'
      ToPort: '8000'
      SourceSecurityGroupId: !Ref 'ClusterSG'
  XcalarClusterMonitorIngressUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: udp
      FromPort: '8000'
      ToPort: '8000'
      SourceSecurityGroupId: !Ref 'ClusterSG'
  XcalarClusterIngressSSL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      SourceSecurityGroupId: !Ref 'ClusterSG'
  XcalarClusterIngressAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: '18552'
      ToPort: '18552'
      SourceSecurityGroupId: !Ref 'ClusterSG'
  XcalarClusterIngressProto:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: '5000'
      ToPort: '5000'
      SourceSecurityGroupId: !Ref 'ClusterSG'
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Mount Access Security Group
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref 'ClusterSG'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EfsSecurityGroup'
  EfsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EfsSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'EfsSecurityGroup'
  EfsSharedRoot:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'
  EfsMountTarget:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - EfsSharedRoot
      - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref 'EfsSharedRoot'
      SubnetId: !Ref 'PrivateSubnetCluster'
      SecurityGroups:
        - !Ref 'EfsSecurityGroup'
  XcalarPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
  XcalarClusterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EfsMountTarget
    Properties:
      PlacementGroup: !Ref 'XcalarPlacementGroup'
      LaunchConfigurationName: !Ref 'XcalarClusterLC'
      MinSize: !Ref 'XcalarClusterSize'
      MaxSize: !Ref 'XcalarClusterSize'
      DesiredCapacity: !Ref 'XcalarClusterSize'
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnetCluster'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-XcalarCluster'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: !Ref 'XcalarClusterSize'
  XcalarClusterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref 'ClusterInstanceType'
      AssociatePublicIpAddress: !Ref 'AssociatePublicIpAddress'
      SecurityGroups:
        - !Ref 'ClusterSG'
      KeyName: !Ref 'KeyPair'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMZN1HVM
      IamInstanceProfile: !Ref 'XcalarClusterProfile'
      UserData: !Base64
        Fn::Sub:
          - |-
            #!/bin/bash
            yum update -y
            #install the cfn-init tools
            yum install -y curl ca-certificates unzip
            yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource XcalarClusterASG  --region ${AWS::Region}
            #
            curl -Lf "${BootstrapUrl}" -o bootstrap.sh
            /bin/bash bootstrap.sh --bootstrap-expect ${XcalarClusterSize} --tag-key ${XcalarEc2RetryTagKey} --tag-value ${AWS::StackName} --stack-name ${AWS::StackName} --nfs-mount ${EfsMount} --license "${LicenseKey}" --installer-url "${InstallerUrl}"
            rc=$?
            /opt/aws/bin/cfn-signal -e $rc  --stack ${AWS::StackName} --resource XcalarClusterASG --region ${AWS::Region}
            exit $rc
          - EfsMount: !Sub '${EfsSharedRoot}:/'
            BootstrapUrl: !Sub '${TemplateBaseUrl}scripts/user-data.sh'
  XcalarClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ''
  XcalarClusterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: xcalar-cluster
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: '*'
      Roles:
        - !Ref 'XcalarClusterRole'
  XcalarClusterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'XcalarClusterRole'
Outputs:
  XcalarEc2RetryTagKey:
    Value: !Ref 'XcalarEc2RetryTagKey'
    Description: The Amazon EC2 instance tag key to filter on when joining to other
      Xcalar nodes.
  XcalarEc2RetryTagValue:
    Value: !Ref 'AWS::StackName'
    Description: The Amazon EC2 instance tag value to filter on when joining to other
      Xcalar nodes.
  MountTargetID:
    Description: Mount target ID
    Value: !Ref 'EfsMountTarget'
  FileSystemID:
    Description: File system ID
    Value: !Ref 'EfsSharedRoot'
