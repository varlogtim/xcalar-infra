#!/bin/bash

# wrapper for ovirt/ovirttool.py;
# Deploys it within a ub14 docker container which sets up all of its
# required py dependencies.
# Args: whichever args are required for ovirt/ovirttool.py
# - Example:
#  ovirttool --vmbasename=name --count=1 --noinstaller
#    runs the following, in a new ub14 Docker container:
#  $XLRINFRA/ovirt/ovirttool.py --vmbasename=name --count=1 --noinstaller
# - See http://wiki.int.xcalar.com/mediawiki/index.php/Ovirttool#Setup for Setup to run this script

set -e

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
if [ -z "$XLRINFRADIR" ]; then
    export XLRINFRADIR="$(cd $SCRIPTDIR/.. && pwd)"
fi
cd $XLRINFRADIR

# will create a ub14 Docker container and run ovirttool in it;
# setup so ub14 Docker containers can be built
if ! docker pull registry.int.xcalar.com/xcalar/ub14-build:ovirttool >/dev/null 2>&1; then
    if [ -z "$XLRDIR" ]; then
        echo "Must set XLRDIR to build ub14 containers (which script will run ovirttool in)" >&2
        exit 1
    fi
    echo "Performing a one-time setup on your machine... please wait (could take up to 5 minutes)" >&2
    cd "$XLRDIR/docker/ub14"
    echo "export http_proxy:=${http_proxy:-http://cacher:3128}" > local.mk
    make ub14-build
else
    docker tag registry.int.xcalar.com/xcalar/ub14-build:ovirttool ub14-build:latest
fi

# build the Docker container to run the tool in
if ! docker image inspect ovirttool >/dev/null 2>&1; then
    TMP="$(mktemp -d -t ovirtool.XXXXXX)"
    docker build -t ovirttool -f "$XLRINFRADIR/docker/ovirttool.df" "$TMP"
    rmdir "$TMP"
fi
cd $XLRINFRADIR

VM_COMMENT="${VM_COMMENT:-""}"

# OVIRT_PASSWORD and OVIRT_UNAME set in shell wrapper; allows tool to be non-interactive
# (--user in @$ takes precedence over OVIRT_UNAME if both supplied)
# VM_COMMENT allows an override of the default comment metadata that gets attached to
# VMs created by the ovirttool, so automated deployments of ovirttool can set their own
# (setting this comment is a way to keep track in ovirt gui, which VMs were created by ovirttool)
docker run -t -e OVIRT_PASSWORD -e OVIRT_UNAME -e VM_COMMENT -v /netstore:/netstore -v $XLRINFRADIR:$XLRINFRADIR -w $XLRINFRADIR -u `id -u`:`id -g` --rm ovirttool ovirt/ovirttool.py "$@"
